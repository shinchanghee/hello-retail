frameworkVersion: "^4.1.12"

service: hello-retail-event-writer-api

custom:
  stage: dev
  retailStreamVersion: 1
  eventWriterApiVersion: 1 # The version of this service to depend upon
  # externally, use `${file(~/event-writer/serverless.yml)}`, replacing the `~` therein with the appropriate relative reference [e.g. '..' or '../..']
  # Exports
  exportEventWriterRestApi: hello-retail-event-writer-api:dev:EventWriterRestApi:1

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-northeast-2
  memorySize: ${env:MEMORY_SIZE}
  stage: dev
  environment:
    STAGE: dev
  iam:
    role:
      statements: # permissions for all of your functions can be set here
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:PutItem
          Resource: !Sub "arn:aws:dynamodb:ap-norhteast-2:590183717745:table/${MetricsTableEventWriter}"

functions:
  eventWriter:
    role:
      Fn::GetAtt: [ EventWriter, Arn ]
    handler: eventWriterApi.eventWriter
    environment:
      STREAM_NAME:
        Fn::ImportValue: hello-retail-stream:dev:RetailStreamName:1
    events:
      - http:
          path: event-writer
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

resources:
  Resources:
    MetricsTableEventWriter:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: metrics.event-writer
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    # Log Group
    EventWriterLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/hello-retail-event-writer-api-dev-eventWriter
        RetentionInDays: 7

    EventWriter: # role for the Event Writer Lambda to write to logs and the Kinesis Stream (retailStream)
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: devEventWriter1
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: lambda.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSLambda_FullAccess
          - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        Policies:
          - PolicyName: CreateAndWriteToLogStream
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource:
                    - Fn::Join:
                      - ':'
                      - - Fn::GetAtt: [ EventWriterLogGroup, Arn ]
                        - '*'
          - PolicyName: WriteToKinesis
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'kinesis:PutRecord'
                  Resource:
                    Fn::ImportValue: hello-retail-stream:dev:RetailStreamArn:1

  Outputs:
    EventWriterRestApi:
      Description: API used to submit producer events to the Kinesis Stream
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: hello-retail-event-writer-api:dev:EventWriterRestApi:1

